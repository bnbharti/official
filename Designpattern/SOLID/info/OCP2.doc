SRP:-
Single Responsibility Principle (SRP)
  It asserts that a class should have only one reason to change, meaning it should have only one responsibility or job. 
 This principle helps create more maintainable, understandable, and flexible code.

Benefits of SRP
Improved Readability:
 		Classes with a single responsibility are easier to read and understand, as they focus on one specific task.
Easier Testing:
		 Isolated responsibilities make unit testing simpler, as each class can be tested independently.
Reduced Complexity:
		 By breaking down complex classes into simpler ones, the overall complexity of the system is reduced.
Enhanced Flexibility:
		 Changes in one part of the system are less likely to affect other parts, making the system more adaptable to change.
		 
		 
		 
		 Key Concepts of the Open/Closed Principle
		 
Open for Extension: 
		This means that the behavior of a module can be extended to accommodate new requirements. 
For example, you can add new classes or methods that enhance the functionality of existing code.
Closed for Modification: 
		Existing code should not be changed when new functionality is added. 
This helps ensure that previously tested and stable code remains intact, reducing the likelihood of introducing new defects.